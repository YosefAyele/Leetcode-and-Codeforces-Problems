class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end = False
class WordDictionary:

    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        curr = self.root
        for letter in word:
            if letter not in curr.children:
                curr.children[letter] = TrieNode()

            curr = curr.children[letter]
        curr.is_end = True

    def search(self, word: str) -> bool:

        def dfs(i,root):
            curr = root
            
            for j in range(i,len(word)):
                c = word[j]
                if c == ".":
                    for child in curr.children.values():
                        if dfs(j+1,child):
                            return True
                    return False
                else:
                    
                    if c not in curr.children:
                        return False
                    curr = curr.children[c]
                    
            return curr.is_end

        return dfs(0,self.root)


        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word) 
